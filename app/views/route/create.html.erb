<style>
   #map {
    height: 100vh;
  }
</style>
<div class="container-fluid" style="background-color: white;">
	<div class="row barlist">
		<div class="col-md-2" style="padding: 0 0;">

			<h1 class="roout" style="margin-left: 10px;">ROUTES</h1>
			<ul class="nav">
		      <li><a href="#"><i class="fa fa-eye" aria-hidden="true"></i>&nbsp; Visualize</a></li>
		      <li><a href="#"><i class="fa fa-book" aria-hidden="true"></i>&nbsp; Accounts</a></li>
		      <li><a href="#"><i class="fa fa-street-view" aria-hidden="true"></i>&nbsp; Places</a></li>
		      <li><a href="#" data-toggle="modal" data-target="#myModal"><i class="fa fa-road" aria-hidden="true"></i>&nbsp; Routes</a></li>
			  <li><%= link_to "  Signout", destroy_user_session_path, class: "fa fa-sign-out" , :method => "DELETE" %></li>
		    </ul>
<!-- Modal -->
<div id="myModal" class="modal fade" tabindex="-1" role="dialog">
  <div class="modal-dialog">

    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">Create Route</h4>
      </div>
      <div class="modal-body">
        			<%= form_tag({controller: "route", action: "create"}, method: "post" , multipart: true ) do %>
						<div class="form-group">
						    <%= label_tag(:route_name, "Route Name:") %>
				  			<%= text_field_tag :route_name , nil , class: "form-control"%>
						</div>

						<div class="form-group">
						    <%= label_tag(:estimated_time, "Estimated Time:") %>
						    <%= text_field_tag(:estimated_time,  nil , class: "form-control") %>
						</div>

						<div class="form-group">
						    <%= label_tag(:starting_point, "Starting Point:") %>
				  			<%= text_field_tag :starting_point , nil , class: "form-control"%>
						</div>

						<div class="form-group">
						    <%= label_tag(:file_upload, "Upload File:") %>
				  			<%= file_field_tag :file_upload , class: "form-control" %>
						</div>
					  
					  </div>
      <div class="modal-footer">
      	<%= submit_tag "Submit" , class: "btn btn-default" %>
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
					  
					<% end %>
      
    </div>

  </div>
</div>


		</div>
		<div class="col-md-10" style="padding: 0 0;">
			<div id="map"></div>
		</div>
	</div>
</div>

<script>
  /*function initMap() {
    var mapDiv = document.getElementById('map');
    var map = new google.maps.Map(mapDiv, {
        center: {lat: 44.540, lng: -78.546},
        zoom: 12
    });*/

    /*var infoWindow = new google.maps.InfoWindow({map: map});*/

    /*if (navigator.geolocation) {
	    navigator.geolocation.getCurrentPosition(function(position) {
	      var pos = {
	        lat: position.coords.latitude,
	        lng: position.coords.longitude
	      };

	      map.setCenter(pos);
	    }, function() {
	      handleLocationError(true, infoWindow, map.getCenter());
	    });
	  } else {
	    // Browser doesn't support Geolocation
	    handleLocationError(false, infoWindow, map.getCenter());
	  }
  }*/

</script>
<script>
  var latorg;
    var lngorg;
    
    var latdest;
    var lngdest;
  
    var c=0;
    
    var marker = [];
    
      function initMap() {
    var bounds = new google.maps.LatLngBounds;
        var directionsDisplay = new google.maps.DirectionsRenderer;
        var directionsService = new google.maps.DirectionsService;
        var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 14,
          center: {lat: 31.510878, lng: 74.344726}
        });

        /*if (navigator.geolocation) {
	    navigator.geolocation.getCurrentPosition(function(position) {
	      var pos = {
	        lat: position.coords.latitude,
	        lng: position.coords.longitude
	      };
	      map.setCenter(pos);
	    }, function() {
	      handleLocationError(true, infoWindow, map.getCenter());
	    });
	  } else {
	    // Browser doesn't support Geolocation
	    handleLocationError(false, infoWindow, map.getCenter());
	  }*/
        //directionsDisplay.setMap(map);

    
    var markers = [];
            
            //map.setOptions({ minZoom: 1, maxZoom: 4 });
        latorg = 31.510878;
        lngorg = 74.344726;
        var rClick = {lat: latorg, lng: lngorg};
            
        marker1 = new google.maps.Marker({
                map: map,
                position: rClick,
                
                title:'Account Name: '
	    })
	    marker.push(marker1);

	    var counter = 0 ;
	    var colour = new Array("red", "blue", "green" , "yellow");
		<% @csv.each do |row| %>

			latdest = <%= row.to_hash['lat'] %>;
	        lngdest = <%= row.to_hash['long'] %>;
	        
	        
	        var rClick2 = {lat: latdest, lng: lngdest};
	        
	        marker12 = new google.maps.Marker({
	                map: map,
	                position: rClick2,
	                
	                title:'Account Name: '
	        })
	        marker.push(marker12); 

	        var directionsDisplay = new google.maps.DirectionsRenderer({ polylineOptions: { strokeColor: colour[counter] } });
	        var directionsService = new google.maps.DirectionsService;
	        directionsDisplay.setMap(map);

	        calculateAndDisplayRoute(directionsService, directionsDisplay);
	        counter += 1 ;
		<% end %>
	    

          ///code for second file
           /* google.maps.event.addListener(map, "rightclick", function(event) {
        
        // populate yor box/field with lat, lng
        
        
        if(c==0){
        	
            latorg = event.latLng.lat();
            lngorg = event.latLng.lng();
            
            marker.length = 0;
            var rClick = {lat: latorg, lng: lngorg};
            
            marker1 = new google.maps.Marker({
                    map: map,
                    position: rClick,
                    
                    title:'Account Name: '
                  })
                  marker.push(marker1);
                  c=10;
          }
        else if(c==10){
            latdest = event.latLng.lat();
            lngdest = event.latLng.lng();
            
            
            var rClick = {lat: latdest, lng: lngdest};
            
            marker1 = new google.maps.Marker({
                    map: map,
                    position: rClick,
                    
                    title:'Account Name: '
                  })
                  marker.push(marker1);
                
                var directionsDisplay = new google.maps.DirectionsRenderer;
                var directionsService = new google.maps.DirectionsService;
                directionsDisplay.setMap(map);

                calculateAndDisplayRoute(directionsService, directionsDisplay);
                
              c=0;  
          } 
        
          
      });*/



            
      }
function setMapOnAll(map) {
  for (var i = 0; i < marker.length; i++) {
    marker[i].setMap(map);
  }
}
    
      function calculateAndDisplayRoute(directionsService, directionsDisplay) {
    setMapOnAll(null);
        var selectedMode = "DRIVING";
        directionsService.route({
           origin: {lat: latorg, lng: lngorg},  // Haight.
          //destination: {lat: latk, lng: lngkd},  // Ocean Beach. 
      destination: {lat: latdest, lng: lngdest},  // Ocean Beach.
          // Note that Javascript allows us to access the constant
          // using square brackets and a string value as its
          // "property."
          travelMode: google.maps.TravelMode[selectedMode]
        }, function(response, status) {
          if (status == google.maps.DirectionsStatus.OK) {
            directionsDisplay.setDirections(response);
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
            var geocoder = new google.maps.Geocoder;

        var service = new google.maps.DistanceMatrixService;
        service.getDistanceMatrix({
          origins: [{lat: latorg, lng: lngorg}, {lat: latdest, lng: lngdest}],
          destinations: [{lat: latorg, lng: lngorg}, {lat: latdest, lng: lngdest}],
          travelMode: google.maps.TravelMode.TRANSIT,
          unitSystem: google.maps.UnitSystem.METRIC,
          avoidHighways: false,
          avoidTolls: false
        }, function(response, status) {
          if (status !== google.maps.DistanceMatrixStatus.OK) {
            alert('Error was: ' + status);
          } else {
            var originList = response.originAddresses;
            var destinationList = response.destinationAddresses;
            var outputDiv = document.getElementById('output');
            //outputDiv.innerHTML = '';
            //deleteMarkers(markersArray);

            var showGeocodedAddressOnMap = function(asDestination) {
              //var icon = asDestination ? destinationIcon : originIcon;
              return function(results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
        var bounds = new google.maps.LatLngBounds;
                  //map.fitBounds(bounds.extend(results[0].geometry.location));
                  /*markersArray.push(new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location,
                    //icon: icon
                  }));*/
                } else {
                  console.log('Geocode was not successful due to: ' + status);
                }
              };
            };

            for (var i = 0; i < originList.length; i++) {
              var results = response.rows[i].elements;
              geocoder.geocode({'address': originList[i]},
                  showGeocodedAddressOnMap(false));
              for (var j = 0; j < results.length; j++) {
                geocoder.geocode({'address': destinationList[j]},
                    showGeocodedAddressOnMap(true));
                //outputDiv.innerHTML += originList[i] + ' to ' + destinationList[j] +
                  //  ': ' + results[j].distance.text + ' in ' +
                    //results[j].duration.text + '<br>';
          
          //console.log(results[j].duration.text);
          /*var element = document.getElementById("timeduration");
            element.innerHTML = "Duration: "+results[0].duration.text;*/
              }
            }
          }
        });
      }
    
    
    
    
    
    
    
    
    </script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBoUyblkGqwp2lFuWQb0v_-J_mI5sYJYPc&libraries=places&callback=initMap"
async defer></script>
